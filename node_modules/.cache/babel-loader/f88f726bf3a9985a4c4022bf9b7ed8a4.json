{"ast":null,"code":"var _jsxFileName = \"C:\\\\school\\\\webdev\\\\crud_app_frontend\\\\src\\\\components\\\\containers\\\\NewStudentContainer.js\";\n\n/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewStudentContainer extends Component {\n  //Get campus data from back end database\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  } // Initialize state\n\n\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n      //Check if campus id is in database\n\n      if (!this.state.allCampus.map(({\n        id\n      }) => id).includes(parseInt(this.state.campusId))) {\n        alert(\"This campus ID is not in our database, please enter a valid campus ID!\");\n      } else {\n        let student = {\n          firstname: this.state.firstname,\n          lastname: this.state.lastname,\n          campusId: this.state.campusId,\n          email: this.state.email,\n          //AL\n          gpa: this.state.gpa,\n          //AL\n          imageURL: this.state.imageURL //AL\n\n        }; // Add new student in back-end database\n\n        let newStudent = await this.props.addStudent(student); // Update state, and trigger redirect to show the new student\n\n        this.setState({\n          firstname: \"\",\n          lastname: \"\",\n          email: \"\",\n          //AL\n          gpa: 0.0,\n          //AL\n          imageURL: null,\n          //AL\n          campusId: null,\n          redirect: true,\n          redirectId: newStudent.id\n        });\n      }\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      //AL\n      gpa: 0.0,\n      //AL\n      imageURL: null,\n      //AL\n      campusId: null,\n      allCampus: this.props.allCampuses,\n      redirect: false,\n      redirectId: null\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        allCampuses: this.props.allCampuses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n\n} // 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n\n\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses // Get the State object from Reducer \"allCampuses\"\n\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student)),\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk())\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(NewStudentContainer);","map":{"version":3,"sources":["C:/school/webdev/crud_app_frontend/src/components/containers/NewStudentContainer.js"],"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","fetchAllCampusesThunk","NewStudentContainer","componentDidMount","props","fetchAllCampuses","constructor","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","state","allCampus","map","id","includes","parseInt","campusId","alert","student","firstname","lastname","email","gpa","imageURL","newStudent","addStudent","redirect","redirectId","allCampuses","componentWillUnmount","render","mapState","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewStudentView from '../views/NewStudentView';\r\nimport { addStudentThunk } from '../../store/thunks';\r\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\r\n\r\nclass NewStudentContainer extends Component {\r\n  //Get campus data from back end database\r\n  componentDidMount() {\r\n    this.props.fetchAllCampuses();\r\n  }\r\n\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      firstname: \"\", \r\n      lastname: \"\", \r\n      email: \"\", //AL\r\n      gpa: 0.0, //AL\r\n      imageURL: null, //AL\r\n      campusId: null, \r\n      allCampus: this.props.allCampuses,\r\n      redirect: false, \r\n      redirectId: null\r\n    };\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n    \r\n    //Check if campus id is in database\r\n    if (!(this.state.allCampus.map(({id}) => id)).includes(parseInt(this.state.campusId))){ \r\n      alert(\"This campus ID is not in our database, please enter a valid campus ID!\")\r\n    }\r\n    else{\r\n        let student = {\r\n          firstname: this.state.firstname,\r\n          lastname: this.state.lastname,\r\n          campusId: this.state.campusId,\r\n          email: this.state.email, //AL\r\n          gpa: this.state.gpa, //AL\r\n          imageURL: this.state.imageURL //AL\r\n      };\r\n      \r\n      // Add new student in back-end database\r\n      let newStudent = await this.props.addStudent(student);\r\n\r\n      // Update state, and trigger redirect to show the new student\r\n      this.setState({\r\n        firstname: \"\", \r\n        lastname: \"\", \r\n        email: \"\", //AL\r\n        gpa: 0.0, //AL\r\n        imageURL: null, //AL\r\n        campusId: null, \r\n        redirect: true, \r\n        redirectId: newStudent.id\r\n      });\r\n    }\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new student input form\r\n  render() {\r\n    // Redirect to new student's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewStudentView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}     \r\n          allCampuses={this.props.allCampuses} \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n  return {\r\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\r\n  };\r\n};  \r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        addStudent: (student) => dispatch(addStudentThunk(student)),\r\n        fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(NewStudentContainer);"]},"metadata":{},"sourceType":"module"}